env:
# 这里env配置为哪个就会对应读取config文件夹下的哪个配置文件
  dev # 开发环境
  #test #测试环境
  #prod #生产环境

module_config:
  base_path:
    modules
  modules:
    # 这里modules配置为哪个就会对应读取modules文件夹下的哪个模块
    - test
    # - test1
    - monitoring  # 添加这一行

logging:
  project_name: project_name #工程名
# 日志路径示意如下
# parent_directory
# │
# ├── project_name (工程目录)
# │   │
# │   ├── main.py (工程文件示例)
# │   └── ...
# │
# ├── log
# │   ├── project_name
# │       ├── 2024
# │       │   ├── 2024-01
# │       │   │   └── 2024-01-01.log
# │       │   └── 2024-02
# │       │       └── 2024-02-01.log
# │       └── 2025
# │           └── 2025-01
# │               └── 2025-01-01.log
  base_log_directory: ../log #日志相对工程的路径
  #默认日志级别，高于或等于此级别的才会被记录，
  #级别：DEBUG INFO WARNING ERROR CRITICAL
  #例如，将日志级别设置为WARNING，则DEBUG和INFO级别的日志将被忽略。
  log_level: INFO 

scheduler:
  # jobstore:
    # 作业存储的数据库连接URL
    # mysql+pymysql: 使用PyMySQL驱动连接MySQL数据库
    # username: 数据库用户名
    # password: 数据库密码
    # host: 数据库服务器地址
    # port: 数据库服务器端口
    # database: 要使用的数据库名称
    # url: mysql+pymysql://username:password@host:port/database
  executors:
    # 默认线程池的线程数量
    # 用于并发执行较轻量级的任务
    default_threads: 20
    # 进程池的进程数量
    # 用于执行CPU密集型或需要独立Python解释器的任务
    process_pool: 5
  job_defaults:
    # 是否合并执行错过的任务
    # false表示不合并,每个错过的任务都会被单独执行
    coalesce: false
    # 同一个任务的最大同时运行实例数
    # 3表示同一个任务最多可以有3个实例同时运行
    max_instances: 3